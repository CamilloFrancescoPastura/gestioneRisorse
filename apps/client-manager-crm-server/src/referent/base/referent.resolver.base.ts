/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Referent } from "./Referent";
import { ReferentCountArgs } from "./ReferentCountArgs";
import { ReferentFindManyArgs } from "./ReferentFindManyArgs";
import { ReferentFindUniqueArgs } from "./ReferentFindUniqueArgs";
import { CreateReferentArgs } from "./CreateReferentArgs";
import { UpdateReferentArgs } from "./UpdateReferentArgs";
import { DeleteReferentArgs } from "./DeleteReferentArgs";
import { ReferentService } from "../referent.service";
@graphql.Resolver(() => Referent)
export class ReferentResolverBase {
  constructor(protected readonly service: ReferentService) {}

  async _referentsMeta(
    @graphql.Args() args: ReferentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Referent])
  async referents(
    @graphql.Args() args: ReferentFindManyArgs
  ): Promise<Referent[]> {
    return this.service.referents(args);
  }

  @graphql.Query(() => Referent, { nullable: true })
  async referent(
    @graphql.Args() args: ReferentFindUniqueArgs
  ): Promise<Referent | null> {
    const result = await this.service.referent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Referent)
  async createReferent(
    @graphql.Args() args: CreateReferentArgs
  ): Promise<Referent> {
    return await this.service.createReferent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Referent)
  async updateReferent(
    @graphql.Args() args: UpdateReferentArgs
  ): Promise<Referent | null> {
    try {
      return await this.service.updateReferent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Referent)
  async deleteReferent(
    @graphql.Args() args: DeleteReferentArgs
  ): Promise<Referent | null> {
    try {
      return await this.service.deleteReferent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
