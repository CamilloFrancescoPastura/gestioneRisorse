/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Referent as PrismaReferent } from "@prisma/client";

export class ReferentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReferentCountArgs, "select">): Promise<number> {
    return this.prisma.referent.count(args);
  }

  async referents(
    args: Prisma.ReferentFindManyArgs
  ): Promise<PrismaReferent[]> {
    return this.prisma.referent.findMany(args);
  }
  async referent(
    args: Prisma.ReferentFindUniqueArgs
  ): Promise<PrismaReferent | null> {
    return this.prisma.referent.findUnique(args);
  }
  async createReferent(
    args: Prisma.ReferentCreateArgs
  ): Promise<PrismaReferent> {
    return this.prisma.referent.create(args);
  }
  async updateReferent(
    args: Prisma.ReferentUpdateArgs
  ): Promise<PrismaReferent> {
    return this.prisma.referent.update(args);
  }
  async deleteReferent(
    args: Prisma.ReferentDeleteArgs
  ): Promise<PrismaReferent> {
    return this.prisma.referent.delete(args);
  }
}
