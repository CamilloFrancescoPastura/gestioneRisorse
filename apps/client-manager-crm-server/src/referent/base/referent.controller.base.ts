/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferentService } from "../referent.service";
import { ReferentCreateInput } from "./ReferentCreateInput";
import { Referent } from "./Referent";
import { ReferentFindManyArgs } from "./ReferentFindManyArgs";
import { ReferentWhereUniqueInput } from "./ReferentWhereUniqueInput";
import { ReferentUpdateInput } from "./ReferentUpdateInput";

export class ReferentControllerBase {
  constructor(protected readonly service: ReferentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Referent })
  async createReferent(
    @common.Body() data: ReferentCreateInput
  ): Promise<Referent> {
    return await this.service.createReferent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Referent] })
  @ApiNestedQuery(ReferentFindManyArgs)
  async referents(@common.Req() request: Request): Promise<Referent[]> {
    const args = plainToClass(ReferentFindManyArgs, request.query);
    return this.service.referents({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Referent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async referent(
    @common.Param() params: ReferentWhereUniqueInput
  ): Promise<Referent | null> {
    const result = await this.service.referent({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Referent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReferent(
    @common.Param() params: ReferentWhereUniqueInput,
    @common.Body() data: ReferentUpdateInput
  ): Promise<Referent | null> {
    try {
      return await this.service.updateReferent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Referent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReferent(
    @common.Param() params: ReferentWhereUniqueInput
  ): Promise<Referent | null> {
    try {
      return await this.service.deleteReferent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
